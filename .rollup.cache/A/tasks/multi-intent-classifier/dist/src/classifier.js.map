{"version":3,"file":"classifier.js","sourceRoot":"","sources":["../../src/classifier.ts"],"names":[],"mappings":"AAAA,oBAAoB;AA0BpB,MAAM,OAAO,qBAAqB;IACtB,QAAQ,CAAiB;IAEjC,YAAY,QAAwB;QAChC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC7B,CAAC;IAED,QAAQ,CAAC,KAAa;QAClB,MAAM,KAAK,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;QAChC,MAAM,cAAc,GAA6C,EAAE,CAAC;QAEpE,yBAAyB;QACzB,IAAI,CAAC,KAAK,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE,CAAC;YACtC,OAAO,EAAE,OAAO,EAAE,EAAE,EAAE,cAAc,EAAE,CAAC,EAAE,CAAC;QAC9C,CAAC;QAED,iDAAiD;QACjD,KAAK,MAAM,CAAC,MAAM,EAAE,aAAa,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAyB,EAAE,CAAC;YAC1F,IAAI,UAAU,GAAG,CAAC,CAAC;YAEnB,KAAK,MAAM,OAAO,IAAI,aAAa,EAAE,CAAC;gBAClC,IAAI,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC;oBACtB,UAAU,EAAE,CAAC;gBACjB,CAAC;YACL,CAAC;YAED,iEAAiE;YACjE,MAAM,UAAU,GAAG,UAAU,GAAG,CAAC,CAAC,CAAC,CAAC,UAAU,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;YAC1E,IAAI,UAAU,GAAG,CAAC,EAAE,CAAC;gBACjB,cAAc,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,UAAU,EAAE,CAAC,CAAC;YAChD,CAAC;QACL,CAAC;QAED,MAAM,GAAG,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;QAC9B,MAAM,cAAc,GAAG,GAAG,GAAG,KAAK,CAAC;QAEnC,uDAAuD;QACvD,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,UAAU,GAAG,CAAC,CAAC,UAAU,CAAC,CAAC;QAE3D,OAAO;YACH,OAAO,EAAE,cAAc;YACvB,cAAc,EAAE,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC;SAC7C,CAAC;IACN,CAAC;CACJ;AAED,mCAAmC;AACnC,MAAM,QAAQ,GAAmB;IAC7B,qBAAqB,EAAE;QACnB,0CAA0C;QAC1C,+BAA+B;KAClC;IACD,oBAAoB,EAAE;QAClB,yCAAyC;QACzC,wBAAwB;KAC3B;IACD,iBAAiB,EAAE;QACf,oCAAoC;KACvC;IACD,mBAAmB,EAAE;QACjB,sCAAsC;KACzC;IACD,kBAAkB,EAAE;QAChB,gDAAgD;KACnD;IACD,mBAAmB,EAAE;QACjB,0DAA0D;KAC7D;IACD,gBAAgB,EAAE;QACd,gDAAgD;KACnD;IACD,qBAAqB,EAAE;QACnB,qDAAqD;KACxD;IACD,qBAAqB,EAAE;QACnB,2CAA2C;KAC9C;IACD,gBAAgB,EAAE;QACd,kDAAkD;KACrD;IACD,aAAa,EAAE;QACX,0DAA0D;KAC7D;IACD,mBAAmB,EAAE;QACjB,qDAAqD;KACxD;IACD,YAAY,EAAE;QACV,mDAAmD;KACtD;IACD,iBAAiB,EAAE;QACf,gDAAgD;KACnD;IACD,cAAc,EAAE;QACZ,gDAAgD;KACnD;CACJ,CAAC;AAEF,uCAAuC;AACvC,MAAM,CAAC,MAAM,UAAU,GAAG,IAAI,qBAAqB,CAAC,QAAQ,CAAC,CAAC","sourcesContent":["// src/classifier.ts\r\n\r\nexport type Intent =\r\n    | 'Chat/Conversational'\r\n    | 'URL/Website Search'\r\n    | 'Question-Answer'\r\n    | 'Financial Markets'\r\n    | 'Code/Programming'\r\n    | 'Math/Calculations'\r\n    | 'Product Search'\r\n    | 'Location/Navigation'\r\n    | 'News/Current Events'\r\n    | 'Recipe/Cooking'\r\n    | 'Translation'\r\n    | 'Academic/Research'\r\n    | 'Job/Career'\r\n    | 'Travel Planning'\r\n    | 'Social Media';\r\n\r\nexport interface ClassificationResult {\r\n    intents: { intent: Intent; confidence: number }[];\r\n    processingTime: number; // in milliseconds\r\n}\r\n\r\ntype IntentPatterns = Record<Intent, RegExp[]>;\r\n\r\nexport class MultiIntentClassifier {\r\n    private patterns: IntentPatterns;\r\n\r\n    constructor(patterns: IntentPatterns) {\r\n        this.patterns = patterns;\r\n    }\r\n\r\n    classify(query: string): ClassificationResult {\r\n        const start = performance.now();\r\n        const matchedIntents: { intent: Intent; confidence: number }[] = [];\r\n\r\n        // Edge case: Empty query\r\n        if (!query || typeof query !== 'string') {\r\n            return { intents: [], processingTime: 0 };\r\n        }\r\n\r\n        // Loop through each intent and check for matches\r\n        for (const [intent, regexPatterns] of Object.entries(this.patterns) as [Intent, RegExp[]][]) {\r\n            let matchCount = 0;\r\n\r\n            for (const pattern of regexPatterns) {\r\n                if (pattern.test(query)) {\r\n                    matchCount++;\r\n                }\r\n            }\r\n\r\n            // Calculate confidence as a percentage of regex patterns matched\r\n            const confidence = matchCount > 0 ? matchCount / regexPatterns.length : 0;\r\n            if (confidence > 0) {\r\n                matchedIntents.push({ intent, confidence });\r\n            }\r\n        }\r\n\r\n        const end = performance.now();\r\n        const processingTime = end - start;\r\n\r\n        // Sort intents by confidence score in descending order\r\n        matchedIntents.sort((a, b) => b.confidence - a.confidence);\r\n\r\n        return {\r\n            intents: matchedIntents,\r\n            processingTime: Math.round(processingTime),\r\n        };\r\n    }\r\n}\r\n\r\n// Precomputed patterns for intents\r\nconst patterns: IntentPatterns = {\r\n    \"Chat/Conversational\": [\r\n        /\\b(help|advice|thoughts|discuss|talk)\\b/i,\r\n        /(can you|could you|will you)/i\r\n    ],\r\n    \"URL/Website Search\": [\r\n        /\\b(find|show|link|website|page|site)\\b/i,\r\n        /(website for|link to)/i\r\n    ],\r\n    \"Question-Answer\": [\r\n        /\\b(what|who|where|when|why|how)\\b/i,\r\n    ],\r\n    \"Financial Markets\": [\r\n        /\\b(stock|market|trade|investment)\\b/i,\r\n    ],\r\n    \"Code/Programming\": [\r\n        /\\b(code|program|script|debug|write|develop)\\b/i,\r\n    ],\r\n    \"Math/Calculations\": [\r\n        /\\b(calculate|math|solve|add|subtract|multiply|divide)\\b/i,\r\n    ],\r\n    \"Product Search\": [\r\n        /\\b(find|search|buy|product|available|order)\\b/i,\r\n    ],\r\n    \"Location/Navigation\": [\r\n        /\\b(location|directions|map|navigate|find my way)\\b/i,\r\n    ],\r\n    \"News/Current Events\": [\r\n        /\\b(news|updates|current|events|latest)\\b/i,\r\n    ],\r\n    \"Recipe/Cooking\": [\r\n        /\\b(recipe|cook|food|ingredients|make|prepare)\\b/i,\r\n    ],\r\n    \"Translation\": [\r\n        /\\b(translate|translate to|in language|how do you say)\\b/i,\r\n    ],\r\n    \"Academic/Research\": [\r\n        /\\b(research|study|academic|thesis|paper|journal)\\b/i,\r\n    ],\r\n    \"Job/Career\": [\r\n        /\\b(job|career|employment|resume|apply|vacancy)\\b/i,\r\n    ],\r\n    \"Travel Planning\": [\r\n        /\\b(travel|trip|holiday|plan|book|itinerary)\\b/i,\r\n    ],\r\n    \"Social Media\": [\r\n        /\\b(social|media|post|share|tweet|instagram)\\b/i,\r\n    ]\r\n};\r\n\r\n// Export an instance of the classifier\r\nexport const classifier = new MultiIntentClassifier(patterns);\r\n"]}