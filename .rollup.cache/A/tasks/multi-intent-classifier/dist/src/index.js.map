{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"AAQA,8BAA8B;AAC9B,MAAM,qBAAqB;IACjB,QAAQ,CAAiB;IAEjC,YAAY,QAAwB;QAClC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC3B,CAAC;IAED,QAAQ,CAAC,KAAa;QACpB,MAAM,SAAS,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;QACpC,MAAM,cAAc,GAA6C,EAAE,CAAC;QAEpE,yBAAyB;QACzB,IAAI,CAAC,KAAK,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE,CAAC;YACxC,OAAO,EAAE,OAAO,EAAE,EAAE,EAAE,cAAc,EAAE,CAAC,EAAE,CAAC;QAC5C,CAAC;QAED,wCAAwC;QACxC,KAAK,MAAM,CAAC,MAAM,EAAE,OAAO,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC;YAC9D,IAAI,UAAU,GAAG,CAAC,CAAC;YAEnB,KAAK,MAAM,KAAK,IAAI,OAAO,EAAE,CAAC;gBAC5B,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC;oBACtB,UAAU,EAAE,CAAC;gBACf,CAAC;YACH,CAAC;YAED,iEAAiE;YACjE,IAAI,UAAU,GAAG,CAAC,EAAE,CAAC;gBACnB,MAAM,UAAU,GAAG,UAAU,GAAG,OAAO,CAAC,MAAM,CAAC;gBAC/C,cAAc,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,UAAU,EAAE,CAAC,CAAC;YAC9C,CAAC;QACH,CAAC;QAED,iDAAiD;QACjD,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,UAAU,GAAG,CAAC,CAAC,UAAU,CAAC,CAAC;QAE3D,MAAM,OAAO,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;QAClC,MAAM,cAAc,GAAG,OAAO,GAAG,SAAS,CAAC;QAE3C,OAAO,EAAE,OAAO,EAAE,cAAc,EAAE,cAAc,EAAE,CAAC;IACrD,CAAC;CACF;AAED,wBAAwB;AACxB,eAAe,qBAAqB,CAAC","sourcesContent":["// Define the type for intent patterns where each intent maps to an array of regex patterns\r\ntype IntentPatterns = Record<string, RegExp[]>;\r\n\r\ninterface ClassificationResult {\r\n  intents: { intent: string; confidence: number }[];\r\n  processingTime: number;\r\n}\r\n\r\n// MultiIntentClassifier class\r\nclass MultiIntentClassifier {\r\n  private patterns: IntentPatterns;\r\n\r\n  constructor(patterns: IntentPatterns) {\r\n    this.patterns = patterns;\r\n  }\r\n\r\n  classify(input: string): ClassificationResult {\r\n    const startTime = performance.now();\r\n    const matchedIntents: { intent: string; confidence: number }[] = [];\r\n\r\n    // Edge case: Empty input\r\n    if (!input || typeof input !== 'string') {\r\n      return { intents: [], processingTime: 0 };\r\n    }\r\n\r\n    // Check for matches across all patterns\r\n    for (const [intent, regexes] of Object.entries(this.patterns)) {\r\n      let matchCount = 0;\r\n\r\n      for (const regex of regexes) {\r\n        if (regex.test(input)) {\r\n          matchCount++;\r\n        }\r\n      }\r\n\r\n      // Calculate confidence as a percentage of regex patterns matched\r\n      if (matchCount > 0) {\r\n        const confidence = matchCount / regexes.length;\r\n        matchedIntents.push({ intent, confidence });\r\n      }\r\n    }\r\n\r\n    // Sort intents by confidence in descending order\r\n    matchedIntents.sort((a, b) => b.confidence - a.confidence);\r\n\r\n    const endTime = performance.now();\r\n    const processingTime = endTime - startTime;\r\n\r\n    return { intents: matchedIntents, processingTime };\r\n  }\r\n}\r\n\r\n// Export the classifier\r\nexport default MultiIntentClassifier;\r\n"]}